import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Logger;
import java.util.Scanner;
public class javaApp {
    private static final Logger logger = Logger.getLogger(ddd.class.getName());

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        try {
            while (true) {
                System.out.println("Menu Git:");
                System.out.println("1. Créer un dépot git");
                System.out.println("2. Cloner un référentiel distant");
                System.out.println("3. Ajouter un fichier au dépot");
                System.out.println("4. Créer un commit ");
                System.out.println("5. Visualiser l'état du dépot");
                System.out.println("6. Voir l'historique des commits");
                System.out.println("7. Pousser les dernières modifications de votre référentiel local vers le référentiel distant");
                System.out.println("8. Tirer les dernières modifications du référentiel distant dans votre référentiel local");
                System.out.println("9. Quitter");
                int choice = scanner.nextInt();
                scanner.nextLine();
                switch (choice) {
                    case 1:
                        System.out.print("Entrez le chemin complet du répertoire local où vous souhaitez créer le nouveau repository : ");
                        String newRepoDirectory = scanner.nextLine();
                        createGitRepository(newRepoDirectory);
                        break;
                    case 2:
                        System.out.print("Entrez l'URL du référentiel Git à cloner : ");
                        String gitRepoURL = scanner.nextLine();
                        System.out.print("Entrez le chemin où vous souhaitez cloner le référentiel : ");
                        String destinationDirectory = scanner.nextLine();
                        cloneGitRepository(gitRepoURL, destinationDirectory);
                        break;
case 3:
                        System.out.print("Entrez le chemin complet du répertoire Git local : ");
                        String gitDirectoryToAddFile = scanner.nextLine();
                        System.out.print("Entrez le chemin complet du fichier à ajouter (laissez vide pour créer un nouveau fichier) : ");
                        String fileToAdd = scanner.nextLine();

                        if (fileToAdd.isEmpty()) {
                            System.out.print("Entrez le contenu du nouveau fichier : ");
                            String fileContent = scanner.nextLine();
                            fileToAdd = createAndWriteFile(gitDirectoryToAddFile, fileContent);
                        }
                        addFileToGit(gitDirectoryToAddFile, fileToAdd);
                        break;
                    case 4:
                        System.out.print("Entrez le chemin complet du répertoire Git local : ");
                        String localGitDirectory = scanner.nextLine();
                        System.out.print("Entrez les fichiers à mettre en scène (séparés par des espaces) : ");
                        String filesToStage = scanner.nextLine();
                        System.out.print("Entrez le message de commit : ");
                        String commitMessage = scanner.nextLine();

                        commitChanges(localGitDirectory, filesToStage, commitMessage);
                        System.out.println("Mise en scène et commit terminés.");
                        break;
                    case 5:
                        System.out.print("Entrez le chemin complet du répertoire Git local : ");
                        String gitDirectoryToCheckStatus = scanner.nextLine();
                        checkGitStatus(gitDirectoryToCheckStatus);
                        break;
                    case 6:
                        System.out.print("Entrez le chemin complet du répertoire Git local : ");
                        String gitDirectory = scanner.nextLine();
                        displayCommitHistory(gitDirectory);
                        break;
                    case 7:
                        try {
                            System.out.println("Pousser les dernières modifications de votre référentiel local vers le référentiel distant...");
                            System.out.print("Entrez le chemin du référentiel local : ");
                            String localRepoPath = scanner.nextLine();
                            System.out.print("Entrez le nom du référentiel distant (par exemple, 'origin') : ");
                            String remoteRepo = scanner.nextLine();
                            String[] cmd = { "git", "push", remoteRepo };
                            ProcessBuilder processBuilder = new ProcessBuilder(cmd);
                            processBuilder.directory(new File(localRepoPath));
                            Process process = processBuilder.start();
                            BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                            String line;
                            while ((line = outputReader.readLine()) != null) {
                                System.out.println(line);
                            }
                            int exitCode = process.waitFor();
                            if (exitCode == 0) {
                                System.out.println("Poussée réussie vers le référentiel distant.");
                            } else {
                                System.out.println("Échec de la poussée vers le référentiel distant. Vérifiez les erreurs ci-dessus.");
                            }

                        } catch (IOException | InterruptedException e) {
                            logger.severe("Une exception s'est produite : " + e.getMessage());
                        }
                        break;
                    case 8:
                        try {
                            System.out.println("Effectuer un retirage depuis le référentiel distant...");
                            System.out.print("Entrez le chemin du référentiel local : ");
                            String localRepoPath = scanner.nextLine();
                            System.out.print("Entrez le nom du référentiel distant (par exemple, 'origin') : ");
                            String remoteRepo = scanner.nextLine();
                            String[] cmd = { "git", "pull", remoteRepo };
                            ProcessBuilder processBuilder = new ProcessBuilder(cmd);
                            processBuilder.directory(new File(localRepoPath));
                            Process process = processBuilder.start();
                            BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                            String line;
                            while ((line = outputReader.readLine()) != null) {
                                System.out.println(line);
                            }
                            int exitCode = process.waitFor();
                            if (exitCode == 0) {
                                System.out.println("retirage réussi depuis le référentiel distant.");
                            } else {
                                System.out.println("Échec du retirage depuis le référentiel distant");
                            }

                        } catch (IOException | InterruptedException e) {
                            logger.severe("Une exception s'est produite : " + e.getMessage());
                        }
                        break;
                    case 9:
                        System.out.println("bye bye!");
                        scanner.close();
                        return;
                    default:
                        System.out.println("Choix invalide.");
                }
            }
        } catch (Exception e) {
            logger.severe("Une exception s'est produite : " + e.getMessage());
        }
    }

